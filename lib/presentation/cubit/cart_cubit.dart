import 'package:flutter_bloc/flutter_bloc.dart';
import 'package:logger/logger.dart';

import '../../data/models/cart_item_model.dart';
import '../../data/models/product_model.dart';
import '../../data/repositories/cart_repository.dart';
import '../../utils/number_formatter.dart';
import 'cart_state.dart';

class CartCubit extends Cubit<CartState> {
  final CartRepository repository;
  final Logger logger;
  String? _currentCustomerId;
  String? _currentCartId;
  bool _isLoading = false;
  DateTime? _lastLoadTime;

  CartCubit({required this.repository, required this.logger})
    : super(CartInitial());

  Future<void> addToCart({
    required ProductModel product,
    required double quantity,
    int userId = 1, // ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á userId
  }) async {
    try {
      emit(CartLoading());

      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤
      if (product.id == null || product.id!.isEmpty) {
        emit(const CartError(message: '‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á'));
        return;
      }
      final icCode = product.id!; // ‡πÉ‡∏ä‡πâ product.id ‡πÄ‡∏õ‡πá‡∏ô icCode ‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á

      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ï‡πá‡∏≠‡∏Å‡∏à‡∏≤‡∏Å product object ‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á
      final availableQty = product.qtyAvailable ?? 0.0;
      if (availableQty < quantity) {
        emit(
          CartError(
            message: '‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡∏û‡∏≠ (‡∏°‡∏µ‡πÄ‡∏´‡∏•‡∏∑‡∏≠ ${availableQty.toInt()} ‡∏ä‡∏¥‡πâ‡∏ô)',
          ),
        );
        return;
      }

      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏£‡∏≤‡∏Ñ‡∏≤
      final unitPrice =
          product.finalPrice ?? product.salePrice ?? product.price ?? 0.0;
      if (unitPrice <= 0) {
        emit(const CartError(message: '‡∏£‡∏≤‡∏Ñ‡∏≤‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á'));
        return;
      }
      logger.d(
        'Adding to cart: IC Code: $icCode, Quantity: $quantity, Price: $unitPrice, Available: $availableQty',
      );

      // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡∏ï‡∏£‡∏∞‡∏Å‡∏£‡πâ‡∏≤‡πÇ‡∏î‡∏¢‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ï‡πá‡∏≠‡∏Å‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á
      final cartItem = await repository.addProductToCartDirectly(
        customerId: userId,
        icCode: icCode,
        barcode: product.barcodes?.isNotEmpty == true
            ? product.barcodes!.split(',').first.trim()
            : null,
        unitCode: product.unitStandardCode,
        quantity: quantity,
        unitPrice: unitPrice,
      );      emit(
        CartSuccess(
          cartItem: cartItem,
          message: '‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡∏ï‡∏£‡∏∞‡∏Å‡∏£‡πâ‡∏≤‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢',
        ),
      );

      logger.d('Successfully added to cart: ${cartItem.toJson()}');
      
      // ‚≠ê REFRESH ‡∏¢‡∏≠‡∏î‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏•‡∏á‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤
      await _refreshStockQuantitiesAfterUpdate(icCode);
      
    } catch (e) {
      logger.e('Error adding to cart: $e');

      String errorMessage = '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤';
      if (e.toString().contains('‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡∏û‡∏≠')) {
        errorMessage = '‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡∏û‡∏≠ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏î‡∏à‡∏≥‡∏ô‡∏ß‡∏ô';
      } else if (e.toString().contains('No active cart found')) {
        errorMessage = '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏£‡∏∞‡∏Å‡∏£‡πâ‡∏≤‡πÑ‡∏î‡πâ';
      }

      emit(CartError(message: errorMessage));
    }
  }

  Future<void> checkStock({
    required String icCode,
    required double requestedQuantity,
  }) async {
    try {
      emit(CartLoading());

      final hasStock = await repository.checkStockAvailability(
        icCode: icCode,
        requestedQuantity: requestedQuantity,
      );

      // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà
      final availableQty = await repository.getAvailableQuantity(
        icCode: icCode,
      );

      emit(
        StockCheckSuccess(
          hasStock: hasStock,
          availableQuantity: availableQty,
          icCode: icCode,
        ),
      );

      logger.d(
        'Stock check: IC Code $icCode, Available: $availableQty, Requested: $requestedQuantity, HasStock: $hasStock',
      );
    } catch (e) {
      logger.e('Error checking stock: $e');
      emit(const CartError(message: '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ï‡πá‡∏≠‡∏Å‡πÑ‡∏î‡πâ'));
    }
  }

  Future<void> loadCart({String? customerId}) async {
    try {
      final customer = customerId ?? _currentCustomerId ?? '1';

      // ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡πÇ‡∏´‡∏•‡∏î‡∏ã‡πâ‡∏≥‡∏ñ‡πâ‡∏≤‡πÄ‡∏û‡∏¥‡πà‡∏á‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏õ‡πÑ‡∏°‡πà‡πÄ‡∏Å‡∏¥‡∏ô 5 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
      if (_isLoading) {
        logger.d('üö´ [CUBIT] Already loading cart, skipping...');
        return;
      }

      if (_lastLoadTime != null &&
          DateTime.now().difference(_lastLoadTime!).inSeconds < 5 &&
          customer == _currentCustomerId &&
          state is CartLoaded) {
        logger.d('üö´ [CUBIT] Cart loaded recently, skipping...');
        return;
      }

      _isLoading = true;
      emit(CartLoading());

      _currentCustomerId = customer;
      _lastLoadTime = DateTime.now();

      logger.i('üõí [CUBIT] Loading cart for customer: $customer');      // ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÉ‡∏ô‡∏ï‡∏£‡∏∞‡∏Å‡∏£‡πâ‡∏≤
      final items = await repository.getCartItems(
        customerId: int.parse(customer),
      );

      // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏¢‡∏≠‡∏î‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÉ‡∏ô‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤
      Map<String, double> stockQuantities = {};
      if (items.isNotEmpty) {
        final icCodes = items.map((item) => item.icCode).toList();
        stockQuantities = await repository.getStockQuantities(icCodes: icCodes);
      }

      // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏¢‡∏≠‡∏î‡∏£‡∏ß‡∏°
      double totalAmount = 0.0;
      double totalItems = 0.0;
      for (var item in items) {
        totalAmount += (item.unitPrice ?? 0.0) * item.quantity;
        totalItems += item.quantity;
      }

      // ‡πÄ‡∏Å‡πá‡∏ö cartId ‡∏Ç‡∏≠‡∏á item ‡πÅ‡∏£‡∏Å‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏ä‡πâ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï
      if (items.isNotEmpty) {
        _currentCartId = items.first.cartId.toString();
      }

      logger.i(
        '‚úÖ [CUBIT] Cart loaded successfully: ${items.length} items, Total: ${NumberFormatter.formatCurrency(totalAmount)}',
      );
      emit(
        CartLoaded(
          items: items,
          totalAmount: totalAmount,
          totalItems: totalItems,
          cartId: int.tryParse(_currentCartId ?? ''),
          stockQuantities: stockQuantities,
        ),
      );
    } catch (e) {
      logger.e('‚ùå [CUBIT] Error loading cart: $e');
      emit(const CartError(message: '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î‡∏ï‡∏£‡∏∞‡∏Å‡∏£‡πâ‡∏≤‡πÑ‡∏î‡πâ'));
    } finally {
      _isLoading = false;
    }
  }

  Future<void> updateCartItemQuantity({
    required String icCode,
    required double newQuantity,
  }) async {
    try {
      // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï state ‡∏ó‡∏±‡∏ô‡∏ó‡∏µ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡πÉ‡∏´‡πâ‡∏Å‡∏£‡∏∞‡∏û‡∏£‡∏¥‡∏ö
      final currentState = state;
      if (currentState is CartLoaded) {
        final updatedItems = currentState.items.map((item) {
          if (item.icCode == icCode) {
            final updatedItem = CartItemModel(
              id: item.id,
              cartId: item.cartId,
              icCode: item.icCode,
              barcode: item.barcode,
              unitCode: item.unitCode,
              quantity: newQuantity,
              unitPrice: item.unitPrice,
              totalPrice: (item.unitPrice ?? 0.0) * newQuantity,
              createdAt: item.createdAt,
              updatedAt: DateTime.now(),
            );
            return updatedItem;
          }
          return item;
        }).toList();

        // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏¢‡∏≠‡∏î‡∏£‡∏ß‡∏°‡πÉ‡∏´‡∏°‡πà
        double totalAmount = 0.0;
        double totalItems = 0.0;
        for (var item in updatedItems) {
          totalAmount += (item.unitPrice ?? 0.0) * item.quantity;
          totalItems += item.quantity;
        }        // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï state ‡∏ó‡∏±‡∏ô‡∏ó‡∏µ (‡∏Ñ‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• stockQuantities ‡πÄ‡∏î‡∏¥‡∏°‡πÑ‡∏ß‡πâ)
        emit(
          CartLoaded(
            items: updatedItems,
            totalAmount: totalAmount,
            totalItems: totalItems,
            cartId: currentState.cartId,
            stockQuantities: currentState.stockQuantities, // ‚≠ê ‡∏Ñ‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏¢‡∏≠‡∏î‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡πÑ‡∏ß‡πâ
          ),
        );
      }      // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô background
      await repository.updateCartItemQuantity(
        icCode: icCode,
        quantity: newQuantity,
        customerId: int.parse(_currentCustomerId ?? '1'),
      );

      logger.d('‚úÖ [CUBIT] Updated quantity for $icCode: $newQuantity');
      
      // ‚≠ê REFRESH ‡∏¢‡∏≠‡∏î‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡πÉ‡∏´‡∏°‡πà‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤
      await _refreshStockQuantitiesAfterUpdate(icCode);
      
    } catch (e) {
      logger.e('‚ùå [CUBIT] Error updating quantity: $e');
      // ‡∏ñ‡πâ‡∏≤‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡∏°‡πà
      await loadCart(customerId: _currentCustomerId);
      emit(const CartError(message: '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÑ‡∏î‡πâ'));
    }
  }

  /// Refresh ‡∏¢‡∏≠‡∏î‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤
  Future<void> _refreshStockQuantitiesAfterUpdate(String icCode) async {
    try {
      final currentState = state;
      if (currentState is CartLoaded) {
        // ‡∏î‡∏∂‡∏á‡∏¢‡∏≠‡∏î‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡πÉ‡∏´‡∏°‡πà‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï
        final icCodes = [icCode]; // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á
        final newStockQuantities = await repository.getStockQuantities(icCodes: icCodes);
        
        // ‡∏£‡∏ß‡∏°‡∏Å‡∏±‡∏ö‡∏¢‡∏≠‡∏î‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡πÄ‡∏î‡∏¥‡∏°‡∏Ç‡∏≠‡∏á‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏≠‡∏∑‡πà‡∏ô‡πÜ
        final updatedStockQuantities = Map<String, double>.from(currentState.stockQuantities);
        updatedStockQuantities.addAll(newStockQuantities);
        
        // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï state ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏¢‡∏≠‡∏î‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡πÉ‡∏´‡∏°‡πà
        emit(
          CartLoaded(
            items: currentState.items,
            totalAmount: currentState.totalAmount,
            totalItems: currentState.totalItems,
            cartId: currentState.cartId,
            stockQuantities: updatedStockQuantities, // ‚≠ê ‡∏¢‡∏≠‡∏î‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡πÉ‡∏´‡∏°‡πà
          ),
        );
        
        logger.d('üìä [CUBIT] Refreshed stock quantity for $icCode: ${newStockQuantities[icCode]}');
      }
    } catch (e) {
      logger.e('‚ö†Ô∏è [CUBIT] Could not refresh stock quantities: $e');
      // ‡πÑ‡∏°‡πà throw error ‡πÄ‡∏û‡∏£‡∏≤‡∏∞ main operation (update quantity) ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß
    }
  }
  Future<void> removeFromCart({required String icCode}) async {
    try {
      emit(CartLoading());

      await repository.removeFromCart(
        icCode: icCode,
        customerId: int.parse(_currentCustomerId ?? '1'),
      );

      logger.d('‚úÖ [CUBIT] Removed $icCode from cart');

      // Reload cart to get updated data ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏¢‡∏≠‡∏î‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡πÉ‡∏´‡∏°‡πà
      await loadCart(customerId: _currentCustomerId);
    } catch (e) {
      logger.e('‚ùå [CUBIT] Error removing from cart: $e');
      emit(const CartError(message: '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏•‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÑ‡∏î‡πâ'));
    }
  }

  Future<void> clearCart({String? customerId}) async {
    try {
      emit(CartLoading());

      await repository.clearCart(
        customerId: int.parse(customerId ?? _currentCustomerId ?? '1'),
      );

      _currentCartId = null;

      emit(
        const CartLoaded(
          items: [],
          totalAmount: 0.0,
          totalItems: 0.0,
          cartId: null,
        ),
      );

      logger.d('‚úÖ [CUBIT] Cart cleared successfully');
    } catch (e) {
      logger.e('‚ùå [CUBIT] Error clearing cart: $e');
      emit(const CartError(message: '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏•‡πâ‡∏≤‡∏á‡∏ï‡∏£‡∏∞‡∏Å‡∏£‡πâ‡∏≤‡πÑ‡∏î‡πâ'));
    }
  }

  Future<void> createOrder({String? customerId}) async {
    try {
      emit(CartLoading());

      final order = await repository.createOrder(
        customerId: int.parse(customerId ?? _currentCustomerId ?? '1'),
      );

      emit(
        CartSuccess(
          cartItem: null,
          message: '‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢: ${order.id}',
        ),
      );

      logger.d('‚úÖ [CUBIT] Order created successfully: ${order.id}');
    } catch (e) {
      logger.e('‚ùå [CUBIT] Error creating order: $e');
      emit(const CartError(message: '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡πÑ‡∏î‡πâ'));
    }
  }

  /// ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
  bool isProductInCart(String icCode) {
    final currentState = state;
    if (currentState is CartLoaded) {
      return currentState.items.any((item) => item.icCode == icCode);
    }
    return false;
  }

  /// ‡∏î‡∏∂‡∏á‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÉ‡∏ô‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤
  double getProductQuantityInCart(String icCode) {
    final currentState = state;
    if (currentState is CartLoaded) {
      try {
        final item = currentState.items.firstWhere(
          (item) => item.icCode == icCode,
        );
        return item.quantity;
      } catch (e) {
        return 0.0;
      }
    }
    return 0.0;
  }

  void setCustomerId(String customerId) {
    _currentCustomerId = customerId;
    logger.d('üÜî [CUBIT] Customer ID set to: $customerId');
  }

  void resetState() {
    emit(CartInitial());
  }
}
