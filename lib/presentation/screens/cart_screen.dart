import 'package:flutter/material.dart';
import 'package:flutter_bloc/flutter_bloc.dart';
import 'package:logger/logger.dart';

import '../../data/models/cart_item_model.dart';
import '../../data/models/quotation_model.dart';
import '../../data/models/quotation_enums.dart';
import '../../utils/number_formatter.dart';
import '../../utils/service_locator.dart';
import '../cubit/cart_cubit.dart';
import '../cubit/cart_state.dart';
import '../cubit/quotation_cubit.dart';
import '../widgets/cart_item_widget.dart';
import '../widgets/cart_summary_widget.dart';
import '../widgets/empty_cart_widget.dart';
import '../widgets/app_navigation_bar.dart';
import '../widgets/cart_action_popup.dart';
import 'quick_order_screen.dart';

/// üõí ‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏≠‡∏ï‡∏£‡∏∞‡∏Å‡∏£‡πâ‡∏≤‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤
/// ‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÉ‡∏ô‡∏ï‡∏£‡∏∞‡∏Å‡∏£‡πâ‡∏≤ ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£
class CartScreen extends StatefulWidget {
  const CartScreen({super.key});

  @override
  State<CartScreen> createState() => _CartScreenState();
}

class _CartScreenState extends State<CartScreen> {
  final Logger _logger = Logger();

  @override
  void initState() {
    super.initState();
    _loadCartData();
  }

  void _loadCartData() {
    // ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏£‡∏∞‡∏Å‡∏£‡πâ‡∏≤‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô (‡πÉ‡∏ä‡πâ customer_id = 1 ‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á)
    context.read<CartCubit>().loadCart(customerId: '1');
  }

  @override
  void dispose() {
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      backgroundColor: Colors.grey[50],
      body: Column(
        children: [
          AppNavigationBar(
            title: '‡∏ï‡∏£‡∏∞‡∏Å‡∏£‡πâ‡∏≤‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤',
            additionalActions: [
              BlocBuilder<CartCubit, CartState>(
                builder: (context, state) {
                  if (state is CartLoaded && state.items.isNotEmpty) {
                    return IconButton(
                      icon: const Icon(Icons.delete_outline),
                      onPressed: () => _showClearCartDialog(),
                      tooltip: '‡∏•‡πâ‡∏≤‡∏á‡∏ï‡∏£‡∏∞‡∏Å‡∏£‡πâ‡∏≤',
                    );
                  }
                  return const SizedBox.shrink();
                },
              ),
            ],
          ),
          Expanded(
            child: BlocConsumer<CartCubit, CartState>(
              listener: _handleStateListener,
              buildWhen: (previous, current) {
                // Rebuild ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô
                return previous.runtimeType != current.runtimeType ||
                    (current is CartLoaded &&
                        previous is CartLoaded &&
                        (previous.items.length != current.items.length ||
                            previous.totalAmount != current.totalAmount));
              },
              builder: _buildBody,
            ),
          ),
        ],
      ),
      bottomNavigationBar: BlocBuilder<CartCubit, CartState>(
        buildWhen: (previous, current) {
          // Rebuild bottom bar ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô
          if (current is CartLoaded && previous is CartLoaded) {
            return previous.items.length != current.items.length ||
                previous.totalAmount != current.totalAmount;
          }
          return previous.runtimeType != current.runtimeType;
        },
        builder: (context, state) {
          if (state is CartLoaded && state.items.isNotEmpty) {
            return _buildCheckoutButton(state);
          }
          return const SizedBox.shrink();
        },
      ),
    );
  }

  /// ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ State Listener
  void _handleStateListener(BuildContext context, CartState state) {
    if (state is CartError) {
      _showErrorSnackBar(state.message);
    } else if (state is CartSuccess) {
      _showSuccessSnackBar(state.message);
    }
  }

  /// ‡∏™‡∏£‡πâ‡∏≤‡∏á Body ‡∏´‡∏•‡∏±‡∏Å
  Widget _buildBody(BuildContext context, CartState state) {
    if (state is CartLoading) {
      return _buildLoadingWidget();
    } else if (state is CartLoaded) {
      if (state.items.isEmpty) {
        return const EmptyCartWidget();
      }
      return _buildCartContent(state);
    } else if (state is CartError) {
      return _buildErrorWidget(state.message);
    }

    return const EmptyCartWidget();
  }

  /// Widget ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏™‡∏î‡∏á‡∏Å‡∏≤‡∏£‡πÇ‡∏´‡∏•‡∏î
  Widget _buildLoadingWidget() {
    return const Center(
      child: Column(
        mainAxisAlignment: MainAxisAlignment.center,
        children: [
          CircularProgressIndicator(),
          SizedBox(height: 16),
          Text(
            '‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î‡∏ï‡∏£‡∏∞‡∏Å‡∏£‡πâ‡∏≤‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤...',
            style: TextStyle(fontSize: 16, color: Colors.grey),
          ),
        ],
      ),
    );
  }

  /// Widget ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î
  Widget _buildErrorWidget(String message) {
    return Center(
      child: Column(
        mainAxisAlignment: MainAxisAlignment.center,
        children: [
          Icon(Icons.error_outline, size: 64, color: Colors.red.shade300),
          const SizedBox(height: 16),
          Text(
            '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î',
            style: TextStyle(
              fontSize: 18,
              fontWeight: FontWeight.bold,
              color: Colors.red.shade600,
            ),
          ),
          const SizedBox(height: 8),
          Padding(
            padding: const EdgeInsets.symmetric(horizontal: 32),
            child: Text(
              message,
              textAlign: TextAlign.center,
              style: const TextStyle(fontSize: 14, color: Colors.grey),
            ),
          ),
          const SizedBox(height: 24),
          ElevatedButton.icon(
            onPressed: _loadCartData,
            icon: const Icon(Icons.refresh),
            label: const Text('‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà'),
            style: ElevatedButton.styleFrom(
              backgroundColor: Colors.blue.shade600,
              foregroundColor: Colors.white,
            ),
          ),
        ],
      ),
    );
  }

  /// ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡∏ï‡∏£‡∏∞‡∏Å‡∏£‡πâ‡∏≤
  Widget _buildCartContent(CartLoaded state) {
    return Column(
      children: [
        // ‡∏™‡∏£‡∏∏‡∏õ‡∏ï‡∏£‡∏∞‡∏Å‡∏£‡πâ‡∏≤
        CartSummaryWidget(
          totalItems: state.totalItems,
          totalAmount: state.totalAmount,
        ),

        // ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÉ‡∏ô‡∏ï‡∏£‡∏∞‡∏Å‡∏£‡πâ‡∏≤
        Expanded(
          child: ListView.builder(
            padding: const EdgeInsets.all(16),
            itemCount: state.items.length,
            itemBuilder: (context, index) {
              final item = state.items[index];
              final qtyAvailable = state.stockQuantities[item.icCode];

              return CartItemWidget(
                key: Key('cart_item_${item.icCode}'),
                item: item,
                qtyAvailable: qtyAvailable,
                onQuantityChanged: (newQuantity) {
                  _updateQuantity(item, newQuantity);
                },
                onRemove: () {
                  _removeItem(item);
                },
              );
            },
          ),
        ),
      ],
    );
  }

  /// ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏õ‡∏∏‡πà‡∏°‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏ö‡∏Ç‡∏≠‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏£‡∏≤‡∏Ñ‡∏≤‡πÅ‡∏•‡∏∞‡∏Ç‡∏≠‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏à‡∏≥‡∏ô‡∏ß‡∏ô
  Widget _buildCheckoutButton(CartLoaded state) {
    return Container(
      padding: const EdgeInsets.all(16),
      decoration: BoxDecoration(
        color: Colors.white,
        boxShadow: [
          BoxShadow(
            color: Colors.black.withValues(alpha: 0.1),
            blurRadius: 8,
            offset: const Offset(0, -2),
          ),
        ],
      ),
      child: Column(
        mainAxisSize: MainAxisSize.min,
        children: [
          // ‡πÅ‡∏™‡∏î‡∏á‡∏¢‡∏≠‡∏î‡∏£‡∏ß‡∏°
          Row(
            mainAxisAlignment: MainAxisAlignment.spaceBetween,
            children: [
              const Text(
                '‡∏¢‡∏≠‡∏î‡∏£‡∏ß‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î:',
                style: TextStyle(fontSize: 18, fontWeight: FontWeight.bold),
              ),
              Text(
                NumberFormatter.formatCurrency(state.totalAmount),
                style: TextStyle(
                  fontSize: 20,
                  fontWeight: FontWeight.bold,
                  color: Colors.blue.shade600,
                ),
              ),
            ],
          ),
          const SizedBox(height: 16),
          Column(
            children: [
              // ‡∏õ‡∏∏‡πà‡∏°‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ñ‡∏±‡∏î‡πÑ‡∏õ (‡πÄ‡∏õ‡∏¥‡∏î Popup)
              SizedBox(
                width: double.infinity,
                height: 50,
                child: ElevatedButton(
                  onPressed: () => _showActionPopup(state),
                  style: ElevatedButton.styleFrom(
                    backgroundColor: Colors.blue.shade600,
                    foregroundColor: Colors.white,
                    shape: RoundedRectangleBorder(
                      borderRadius: BorderRadius.circular(12),
                    ),
                    elevation: 2,
                  ),
                  child: const Row(
                    mainAxisAlignment: MainAxisAlignment.center,
                    children: [
                      Icon(Icons.arrow_forward, size: 20),
                      SizedBox(width: 8),
                      Text(
                        '‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ñ‡∏±‡∏î‡πÑ‡∏õ',
                        style: TextStyle(
                          fontSize: 16,
                          fontWeight: FontWeight.bold,
                        ),
                      ),
                    ],
                  ),
                ),
              ),
            ],
          ),
        ],
      ),
    );
  }

  /// ‡πÅ‡∏™‡∏î‡∏á Popup ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ï‡πà‡∏≠‡πÑ‡∏õ
  void _showActionPopup(CartLoaded state) {
    CartActionPopup.show(
      context,
      onQuickOrder: () {
        Navigator.of(context).pop(); // ‡∏õ‡∏¥‡∏î popup
        _proceedToQuickOrder(state);
      },
      onNegotiate: () {
        Navigator.of(context).pop(); // ‡∏õ‡∏¥‡∏î popup
        _createQuotationForNegotiation(state);
      },
      onCreateQuotation: () {
        Navigator.of(context).pop(); // ‡∏õ‡∏¥‡∏î popup
        _proceedToCreateQuotation(state);
      },
      totalAmount: state.totalAmount,
      itemCount: state.items.length,
    );
  }

  /// ‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡∏ó‡∏±‡∏ô‡∏ó‡∏µ (Quick Order)
  void _proceedToQuickOrder(CartLoaded state) {
    _logger.d('Proceeding to Quick Order with ${state.items.length} items');

    if (state.items.isEmpty) {
      _showErrorSnackBar('‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÉ‡∏ô‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤');
      return;
    }

    // ‡∏ô‡∏≥‡∏ó‡∏≤‡∏á‡πÑ‡∏õ‡∏´‡∏ô‡πâ‡∏≤ QuickOrderScreen
    Navigator.push(
      context,
      MaterialPageRoute(
        builder: (context) => QuickOrderScreen(
          cartItems: state.items,
          totalAmount: state.totalAmount,
          customerId: 1, // TODO: ‡πÉ‡∏ä‡πâ customer ID ‡∏à‡∏£‡∏¥‡∏á‡∏à‡∏≤‡∏Å‡∏Å‡∏≤‡∏£ login
        ),
      ),
    );
  }

  /// ‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏ö‡πÄ‡∏™‡∏ô‡∏≠‡∏£‡∏≤‡∏Ñ‡∏≤‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á
  void _proceedToCreateQuotation(CartLoaded state) {
    // TODO: Navigate to quotation confirmation screen
    _logger.d('Creating direct quotation with ${state.items.length} items');

    showDialog(
      context: context,
      builder: (context) => AlertDialog(
        title: const Text('‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏ö‡πÄ‡∏™‡∏ô‡∏≠‡∏£‡∏≤‡∏Ñ‡∏≤'),
        content: Column(
          mainAxisSize: MainAxisSize.min,
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Text('‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤: ${state.totalItems} ‡∏ä‡∏¥‡πâ‡∏ô'),
            const SizedBox(height: 8),
            Text(
              '‡∏¢‡∏≠‡∏î‡∏£‡∏ß‡∏°: ${NumberFormatter.formatCurrency(state.totalAmount)}',
            ),
            const SizedBox(height: 16),
            const Text('‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏ö‡πÄ‡∏™‡∏ô‡∏≠‡∏£‡∏≤‡∏Ñ‡∏≤‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?'),
          ],
        ),
        actions: [
          TextButton(
            onPressed: () => Navigator.pop(context),
            child: const Text('‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å'),
          ),
          ElevatedButton(
            onPressed: () {
              Navigator.pop(context);
              _navigateToQuotationCreation(state);
            },
            style: ElevatedButton.styleFrom(
              backgroundColor: Colors.green.shade600,
              foregroundColor: Colors.white,
            ),
            child: const Text('‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏ö‡πÄ‡∏™‡∏ô‡∏≠‡∏£‡∏≤‡∏Ñ‡∏≤'),
          ),
        ],
      ),
    );
  }

  /// ‡∏ô‡∏≥‡∏ó‡∏≤‡∏á‡πÑ‡∏õ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏ö‡∏Ç‡∏≠‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏£‡∏≤‡∏Ñ‡∏≤
  void _navigateToQuotationCreation(CartLoaded state) async {
    try {
      // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏ö‡∏Ç‡∏≠‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏£‡∏≤‡∏Ñ‡∏≤‡∏à‡∏≤‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤
      _logger.d('Creating quotation with ${state.items.length} items');

      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡πà‡∏≠‡∏ô‡∏™‡∏£‡πâ‡∏≤‡∏á
      if (state.items.isEmpty) {
        _showErrorSnackBar('‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÉ‡∏ô‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤');
        return;
      }

      if (state.cartId == null) {
        _showErrorSnackBar('‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏£‡∏∞‡∏Å‡∏£‡πâ‡∏≤');
        return;
      }

      // ‡πÅ‡∏™‡∏î‡∏á loading
      showDialog(
        context: context,
        barrierDismissible: false,
        builder: (context) => const Center(child: CircularProgressIndicator()),
      );

      // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏ö‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏£‡∏≤‡∏Ñ‡∏≤
      final quotationCubit = sl<QuotationCubit>();

      // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ö‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏£‡∏≤‡∏Ñ‡∏≤
      final quotationItems = state.items
          .map(
            (item) => QuotationItem(
              id: 0, // ‡∏à‡∏∞‡∏ñ‡∏π‡∏Å‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏´‡∏°‡πà‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
              quotationId: 0, // ‡∏à‡∏∞‡∏ñ‡∏π‡∏Å‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏´‡∏°‡πà‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
              icCode: item.icCode,
              barcode: item.barcode,
              unitCode: item.unitCode,
              originalQuantity: item.quantity,
              originalUnitPrice: item.unitPrice ?? 0.0,
              originalTotalPrice: item.totalPrice ?? 0.0,
              requestedQuantity: item.quantity,
              requestedUnitPrice: item.unitPrice ?? 0.0,
              requestedTotalPrice: item.totalPrice ?? 0.0,
              status: QuotationItemStatus.active,
              createdAt: DateTime.now(),
              updatedAt: DateTime.now(),
            ),
          )
          .toList();

      final quotation = Quotation(
        id: 0, // ‡∏à‡∏∞‡∏ñ‡∏π‡∏Å‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏´‡∏°‡πà‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
        cartId: state.cartId!,
        customerId: 1,
        quotationNumber: '', // ‡∏à‡∏∞‡∏ñ‡∏π‡∏Å‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏´‡∏°‡πà
        status: QuotationStatus.pending,
        totalAmount: state.totalAmount,
        totalItems: state.totalItems,
        originalTotalAmount: state.totalAmount,
        notes: '‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏à‡∏≤‡∏Å‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤',
        createdAt: DateTime.now(),
        updatedAt: DateTime.now(),
      );

      // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏ö‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏£‡∏≤‡∏Ñ‡∏≤
      await quotationCubit.createQuotation(quotation, quotationItems);

      // ‡∏•‡πâ‡∏≤‡∏á‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏ö‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏£‡∏≤‡∏Ñ‡∏≤‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
      await context.read<CartCubit>().clearCart(customerId: '1');

      // ‡∏õ‡∏¥‡∏î loading dialog
      if (mounted) Navigator.pop(context);

      // ‡∏ô‡∏≥‡∏ó‡∏≤‡∏á‡πÑ‡∏õ‡∏´‡∏ô‡πâ‡∏≤‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÉ‡∏ö‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏£‡∏≤‡∏Ñ‡∏≤
      if (mounted) {
        Navigator.pushNamedAndRemoveUntil(
          context,
          '/quotation-list',
          ModalRoute.withName('/'),
        );
      }

      // ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
      _showSuccessSnackBar('‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏ö‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏£‡∏≤‡∏Ñ‡∏≤‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤‡πÑ‡∏î‡πâ‡∏ñ‡∏π‡∏Å‡∏•‡πâ‡∏≤‡∏á‡πÅ‡∏•‡πâ‡∏ß');
    } catch (e) {
      // ‡∏õ‡∏¥‡∏î loading dialog ‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÄ‡∏õ‡∏¥‡∏î‡∏≠‡∏¢‡∏π‡πà
      if (mounted) Navigator.pop(context);

      _logger.e('Error creating quotation: $e');
      _showErrorSnackBar(
        '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏ö‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏£‡∏≤‡∏Ñ‡∏≤: ${e.toString()}',
      );
    }
  }

  /// ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏ö‡∏Ç‡∏≠‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏£‡∏≤‡∏Ñ‡∏≤‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ï‡πà‡∏≠‡∏£‡∏≠‡∏á‡∏£‡∏≤‡∏Ñ‡∏≤
  void _createQuotationForNegotiation(CartLoaded state) {
    _logger.d(
      'Creating quotation for negotiation with ${state.items.length} items',
    );

    showDialog(
      context: context,
      builder: (context) => AlertDialog(
        title: const Text('‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏ö‡∏Ç‡∏≠‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏£‡∏≤‡∏Ñ‡∏≤‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ï‡πà‡∏≠‡∏£‡∏≠‡∏á‡∏£‡∏≤‡∏Ñ‡∏≤'),
        content: Column(
          mainAxisSize: MainAxisSize.min,
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Text('‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤: ${state.totalItems} ‡∏ä‡∏¥‡πâ‡∏ô'),
            const SizedBox(height: 8),
            Text(
              '‡∏¢‡∏≠‡∏î‡∏£‡∏ß‡∏°: ${NumberFormatter.formatCurrency(state.totalAmount)}',
            ),
            const SizedBox(height: 16),
            const Text(
              '‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏∞‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏ö‡∏Ç‡∏≠‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏£‡∏≤‡∏Ñ‡∏≤‡πÅ‡∏•‡∏∞‡πÄ‡∏õ‡∏¥‡∏î‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡πà‡∏≠‡∏£‡∏≠‡∏á‡∏£‡∏≤‡∏Ñ‡∏≤‡πÉ‡∏´‡πâ‡∏Ñ‡∏∏‡∏ì',
              style: TextStyle(color: Colors.grey),
            ),
          ],
        ),
        actions: [
          TextButton(
            onPressed: () => Navigator.pop(context),
            child: const Text('‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å'),
          ),
          ElevatedButton(
            onPressed: () {
              Navigator.pop(context);
              _navigateToQuotationForNegotiation(state);
            },
            style: ElevatedButton.styleFrom(
              backgroundColor: Colors.orange.shade600,
              foregroundColor: Colors.white,
            ),
            child: const Text('‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πà‡∏≠‡∏£‡∏≠‡∏á‡∏£‡∏≤‡∏Ñ‡∏≤'),
          ),
        ],
      ),
    );
  }

  /// ‡∏ô‡∏≥‡∏ó‡∏≤‡∏á‡πÑ‡∏õ‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡πà‡∏≠‡∏£‡∏≠‡∏á‡∏£‡∏≤‡∏Ñ‡∏≤
  void _navigateToQuotationForNegotiation(CartLoaded state) async {
    if (!mounted) return; // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ widget ‡∏¢‡∏±‡∏á‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á‡∏≠‡∏¢‡∏π‡πà‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà

    // ‡πÉ‡∏ä‡πâ Navigator ‡πÅ‡∏ö‡∏ö‡∏á‡πà‡∏≤‡∏¢ ‡πÜ ‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á
    showDialog(
      context: context,
      barrierDismissible: false,
      builder: (context) => const AlertDialog(
        content: Row(
          children: [
            CircularProgressIndicator(),
            SizedBox(width: 20),
            Text('‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏ö‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏£‡∏≤‡∏Ñ‡∏≤...'),
          ],
        ),
      ),
    );

    try {
      _logger.d(
        'Creating quotation for negotiation with ${state.items.length} items',
      );

      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡πà‡∏≠‡∏ô‡∏™‡∏£‡πâ‡∏≤‡∏á
      if (state.items.isEmpty) {
        if (mounted) Navigator.pop(context);
        _showErrorSnackBar('‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÉ‡∏ô‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤');
        return;
      }

      if (state.cartId == null) {
        if (mounted) Navigator.pop(context);
        _showErrorSnackBar('‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏£‡∏∞‡∏Å‡∏£‡πâ‡∏≤');
        return;
      }

      // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏ö‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏£‡∏≤‡∏Ñ‡∏≤‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ï‡πà‡∏≠‡∏£‡∏≠‡∏á‡∏£‡∏≤‡∏Ñ‡∏≤
      final quotationCubit = sl<QuotationCubit>();

      // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ö‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏£‡∏≤‡∏Ñ‡∏≤
      final quotationItems = state.items
          .map(
            (item) => QuotationItem(
              id: 0,
              quotationId: 0,
              icCode: item.icCode,
              barcode: item.barcode,
              unitCode: item.unitCode,
              originalQuantity: item.quantity,
              originalUnitPrice: item.unitPrice ?? 0.0,
              originalTotalPrice: item.totalPrice ?? 0.0,
              requestedQuantity: item.quantity,
              requestedUnitPrice: item.unitPrice ?? 0.0,
              requestedTotalPrice: item.totalPrice ?? 0.0,
              status: QuotationItemStatus.active,
              createdAt: DateTime.now(),
              updatedAt: DateTime.now(),
            ),
          )
          .toList();

      final quotation = Quotation(
        id: 0,
        cartId: state.cartId!,
        customerId: 1,
        quotationNumber: '',
        status: QuotationStatus.pending,
        totalAmount: state.totalAmount,
        totalItems: state.totalItems,
        originalTotalAmount: state.totalAmount,
        notes: '‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏à‡∏≤‡∏Å‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ï‡πà‡∏≠‡∏£‡∏≠‡∏á‡∏£‡∏≤‡∏Ñ‡∏≤',
        createdAt: DateTime.now(),
        updatedAt: DateTime.now(),
        items: quotationItems,
      );

      // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏ö‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏£‡∏≤‡∏Ñ‡∏≤
      final createdQuotation = await quotationCubit.createQuotation(
        quotation,
        quotationItems,
      );
      print('üîç [CART] After createQuotation, result: ${createdQuotation?.id}');
      print(
        'üîç [CART] Quotation items count: ${createdQuotation?.items.length ?? 0}',
      );

      // ‡∏õ‡∏¥‡∏î loading dialog
      if (mounted) Navigator.pop(context);

      if (createdQuotation != null && createdQuotation.items.isNotEmpty) {
        // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡πÅ‡∏•‡∏∞‡∏°‡∏µ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤
        print('üîç [CART] Quotation created successfully, clearing cart...');

        // ‡∏•‡∏ö‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÉ‡∏ô‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
        if (mounted) {
          await context.read<CartCubit>().clearCart();
          print('‚úÖ [CART] Cart cleared successfully');

          // ‡πÑ‡∏õ‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡πà‡∏≠‡∏£‡∏≠‡∏á‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ó‡∏±‡∏ô‡∏ó‡∏µ
          print('üîç [CART] Navigating to NegotiationScreen immediately');

          // ‡πÉ‡∏ä‡πâ pushReplacement ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÅ‡∏ó‡∏ô‡∏ó‡∏µ‡πà‡∏´‡∏ô‡πâ‡∏≤‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
          Navigator.pushReplacementNamed(
            context,
            '/negotiation',
            arguments: {'quotation': createdQuotation},
          );

          // ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡πÉ‡∏ô negotiation screen
          ScaffoldMessenger.of(context).showSnackBar(
            const SnackBar(
              content: Text('‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏ö‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏£‡∏≤‡∏Ñ‡∏≤‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πà‡∏≠‡∏£‡∏≠‡∏á‡∏£‡∏≤‡∏Ñ‡∏≤‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏¢'),
              backgroundColor: Colors.green,
              duration: Duration(seconds: 2),
            ),
          );
        }
      } else {
        // ‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
        _showErrorSnackBar('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏ö‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏£‡∏≤‡∏Ñ‡∏≤‡πÑ‡∏î‡πâ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà');
      }
    } catch (e) {
      // ‡∏õ‡∏¥‡∏î loading dialog
      if (mounted) {
        try {
          Navigator.pop(context);
        } catch (_) {}
      }

      _logger.e('Error creating quotation for negotiation: $e');
      _showErrorSnackBar('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏ö‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏£‡∏≤‡∏Ñ‡∏≤: $e');
    }
  }

  /// ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤
  void _updateQuantity(CartItemModel item, double newQuantity) {
    if (newQuantity <= 0.0) {
      _removeItem(item);
      return;
    }

    context.read<CartCubit>().updateCartItemQuantity(
      icCode: item.icCode,
      newQuantity: newQuantity,
    );
  }

  /// ‡∏•‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤
  void _removeItem(CartItemModel item) {
    context.read<CartCubit>().removeFromCart(icCode: item.icCode);
  }

  /// ‡πÅ‡∏™‡∏î‡∏á Dialog ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡πâ‡∏≤‡∏á‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤
  void _showClearCartDialog() {
    showDialog(
      context: context,
      builder: (context) => AlertDialog(
        title: const Text('‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡πâ‡∏≤‡∏á‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤'),
        content: const Text('‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?'),
        actions: [
          TextButton(
            onPressed: () => Navigator.pop(context),
            child: const Text('‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å'),
          ),
          TextButton(
            onPressed: () {
              Navigator.pop(context);
              context.read<CartCubit>().clearCart(customerId: '1');
            },
            style: TextButton.styleFrom(foregroundColor: Colors.red),
            child: const Text('‡∏•‡πâ‡∏≤‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î'),
          ),
        ],
      ),
    );
  }

  /// ‡πÅ‡∏™‡∏î‡∏á Success SnackBar
  void _showSuccessSnackBar(String message) {
    if (mounted) {
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(
          content: Row(
            children: [
              const Icon(Icons.check_circle, color: Colors.white),
              const SizedBox(width: 8),
              Expanded(child: Text(message)),
            ],
          ),
          backgroundColor: Colors.green.shade600,
          behavior: SnackBarBehavior.floating,
          shape: RoundedRectangleBorder(
            borderRadius: BorderRadius.circular(10),
          ),
        ),
      );
    }
  }

  /// ‡πÅ‡∏™‡∏î‡∏á Error SnackBar
  void _showErrorSnackBar(String message) {
    if (mounted) {
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(
          content: Row(
            children: [
              const Icon(Icons.error, color: Colors.white),
              const SizedBox(width: 8),
              Expanded(child: Text(message)),
            ],
          ),
          backgroundColor: Colors.red.shade600,
          behavior: SnackBarBehavior.floating,
          shape: RoundedRectangleBorder(
            borderRadius: BorderRadius.circular(10),
          ),
        ),
      );
    }
  }
}
