import 'package:dio/dio.dart';
import 'package:flutter/foundation.dart';
import 'package:logger/logger.dart';

import '../models/cart_item_model.dart';
import '../models/cart_model.dart';
import '../models/order_model.dart';

abstract class CartDataSource {
  Future<CartModel> getActiveCart({required int customerId});
  Future<CartModel> createCart({required int customerId});
  Future<CartItemModel> addToCart({
    required int cartId,
    required String icCode,
    required String? barcode,
    required String? unitCode,
    required double quantity,
    required double unitPrice,
  });
  Future<double> checkAvailableQuantity({required String icCode});
  Future<Map<String, double>> getStockQuantities({
    required List<String> icCodes,
  });
  Future<List<CartItemModel>> getCartItems({required int customerId});
  Future<void> updateCartItemQuantity({
    required int customerId,
    required String icCode,
    required double quantity,
  });
  Future<void> removeFromCart({
    required int customerId,
    required String icCode,
  });
  Future<void> clearCart({required int customerId});
  Future<OrderModel> createOrder({required int customerId});
  Future<double> getAvailableQuantityRealtime({
    required String icCode,
    required int currentCustomerId,
  });
  Future<Map<String, double>> getAvailableQuantitiesForCart({
    required int customerId,
  });
}

class CartRemoteDataSource implements CartDataSource {
  final Dio dio;
  final Logger logger;

  CartRemoteDataSource({required this.dio, required this.logger});

  @override
  Future<CartModel> getActiveCart({required int customerId}) async {
    try {
      final query =
          """
        SELECT id, customer_id, status, total_amount, total_items, created_at, updated_at 
        FROM carts 
        WHERE customer_id = $customerId AND status = 'active'
        ORDER BY created_at DESC
        LIMIT 1
      """;

      final response = await dio.post('/pgselect', data: {'query': query});

      if (kDebugMode) {
        logger.d('üõí [DATA_SOURCE] Get active cart response: ${response.data}');
      }

      if (response.data['success'] == true &&
          response.data['data'] != null &&
          response.data['data'].isNotEmpty) {
        return CartModel.fromJson(response.data['data'][0]);
      } else {
        // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ï‡∏£‡∏∞‡∏Å‡∏£‡πâ‡∏≤ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏´‡∏°‡πà
        return await createCart(customerId: customerId);
      }
    } catch (e) {
      logger.e('‚õî Error getting active cart', error: e);
      if (kDebugMode) {
        debugPrint('üí• Error getting active cart: $e');
      }
      // ‡∏ñ‡πâ‡∏≤ error ‡∏•‡∏≠‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏£‡∏∞‡∏Å‡∏£‡πâ‡∏≤‡πÉ‡∏´‡∏°‡πà
      return await createCart(customerId: customerId);
    }
  }

  @override
  Future<CartModel> createCart({required int customerId}) async {
    try {
      final query =
          """
        INSERT INTO carts (customer_id, status, total_amount, total_items) 
        VALUES ($customerId, 'active', 0.00, 0)
        RETURNING id, customer_id, status, total_amount, total_items, created_at, updated_at
      """;

      final response = await dio.post('/pgcommand', data: {'command': query});

      if (kDebugMode) {
        logger.d('üõí [DATA_SOURCE] Create cart response: ${response.data}');
      }
      if (response.data['success'] == true) {
        // ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà return ‡∏°‡∏≤‡∏à‡∏≤‡∏Å pgcommand ‡∏à‡∏∞‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô result
        // ‡πÅ‡∏ï‡πà‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á‡∏à‡∏≤‡∏Å‡πÑ‡∏°‡πà‡∏°‡∏µ RETURNING data ‡πÉ‡∏´‡πâ‡∏™‡∏£‡πâ‡∏≤‡∏á cart object ‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß
        // ‡πÅ‡∏•‡πâ‡∏ß‡πÑ‡∏õ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏£‡∏¥‡∏á‡∏à‡∏≤‡∏Å‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á
        return await getActiveCart(customerId: customerId);
      } else {
        throw Exception('Failed to create cart');
      }
    } catch (e) {
      logger.e('‚õî Error creating cart', error: e);
      if (kDebugMode) {
        debugPrint('üí• Error creating cart: $e');
      }
      throw Exception('Failed to create cart: $e');
    }
  }

  @override
  Future<CartItemModel> addToCart({
    required int cartId,
    required String icCode,
    required String? barcode,
    required String? unitCode,
    required double quantity,
    required double unitPrice,
  }) async {
    try {
      // ‡∏•‡∏≠‡∏á‡∏ó‡∏≥ Refresh ‡∏¢‡∏≠‡∏î‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏à‡∏≤‡∏Å‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏•‡∏±‡∏Å‡∏Å‡πà‡∏≠‡∏ô (optional fallback)
      await refreshInventoryBalance(icCode: icCode).catchError((e) {
        // ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏ó‡∏≥‡∏≠‡∏∞‡πÑ‡∏£ - ‡πÉ‡∏ä‡πâ real-time calculation ‡πÅ‡∏ó‡∏ô
        logger.d(
          'üîÑ Using real-time calculation instead of refresh for $icCode',
        );
        return false;
      });

      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏¢‡∏≠‡∏î‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏™‡∏±‡πà‡∏á‡∏Å‡πà‡∏≠‡∏ô‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤
      final availableQty = await checkAvailableQuantity(icCode: icCode);

      if (quantity > availableQty) {
        throw Exception(
          '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏±‡πà‡∏á‡πÑ‡∏î‡πâ‡πÄ‡∏Å‡∏¥‡∏ô‡∏¢‡∏≠‡∏î‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏™‡∏±‡πà‡∏á: ${availableQty.toStringAsFixed(0)} ‡∏´‡∏ô‡πà‡∏ß‡∏¢',
        );
      }

      final totalPrice = quantity * unitPrice;

      // ‡πÅ‡∏ó‡∏£‡∏Å‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÉ‡∏´‡∏°‡πà‡∏´‡∏£‡∏∑‡∏≠‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß
      final query =
          """
        INSERT INTO cart_items (cart_id, ic_code, barcode, unit_code, quantity, unit_price, total_price) 
        VALUES ($cartId, '$icCode', ${barcode != null ? "'$barcode'" : 'NULL'}, ${unitCode != null ? "'$unitCode'" : 'NULL'}, $quantity, $unitPrice, $totalPrice)
        ON CONFLICT (cart_id, ic_code, unit_code, unit_price) 
        DO UPDATE SET 
          quantity = cart_items.quantity + $quantity,
          total_price = (cart_items.quantity + $quantity) * cart_items.unit_price,
          updated_at = CURRENT_TIMESTAMP
        RETURNING id, cart_id, ic_code, barcode, unit_code, quantity, unit_price, total_price, created_at, updated_at
      """;

      final response = await dio.post('/pgcommand', data: {'command': query});

      if (kDebugMode) {
        logger.d('üõí [DATA_SOURCE] Add to cart response: ${response.data}');
      }
      if (response.data['success'] == true) {
        // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏¢‡∏≠‡∏î‡∏£‡∏ß‡∏°‡πÉ‡∏ô‡∏ï‡∏£‡∏∞‡∏Å‡∏£‡πâ‡∏≤
        await _updateCartTotals(cartId);

        // Log ‡∏¢‡∏≠‡∏î‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏™‡∏±‡πà‡∏á‡πÉ‡∏´‡∏°‡πà‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÉ‡∏ô‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤
        final newAvailableQty = await checkAvailableQuantity(icCode: icCode);
        logger.d('üìä Updated available quantity for $icCode: $newAvailableQty');

        // ‡∏™‡πà‡∏á‡∏Å‡∏•‡∏±‡∏ö CartItemModel ‡∏ó‡∏µ‡πà‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏à‡∏≤‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏≤‡∏°‡∏µ
        return CartItemModel(
          id: null, // ‡∏à‡∏∞‡πÑ‡∏î‡πâ‡∏à‡∏≤‡∏Å database ‡∏†‡∏≤‡∏¢‡∏´‡∏•‡∏±‡∏á
          cartId: cartId,
          icCode: icCode,
          barcode: barcode,
          unitCode: unitCode,
          quantity: quantity,
          unitPrice: unitPrice,
          totalPrice: totalPrice,
          createdAt: DateTime.now(),
          updatedAt: DateTime.now(),
        );
      } else {
        throw Exception('Failed to add item to cart');
      }
    } catch (e) {
      logger.e('‚õî Error adding to cart', error: e);
      if (kDebugMode) {
        debugPrint('üí• Error adding to cart: $e');
      }
      throw Exception('Failed to add item to cart: $e');
    }
  }

  @override
  Future<double> checkAvailableQuantity({required String icCode}) async {
    try {
      final query =
          """
        SELECT 
          COALESCE(
            (SELECT SUM(balance_qty) FROM ic_balance WHERE ic_code = '$icCode'), 0
          ) - COALESCE(
            (SELECT SUM(quantity) 
             FROM cart_items ci 
             INNER JOIN carts c ON ci.cart_id = c.id 
             WHERE ci.ic_code = '$icCode' AND c.status = 'active'), 0
          ) as available_qty
      """;

      final response = await dio.post('/pgselect', data: {'query': query});

      if (kDebugMode) {
        logger.d(
          'üì¶ [DATA_SOURCE] Check available quantity response: ${response.data}',
        );
      }
      if (response.data['success'] == true &&
          response.data['data'] != null &&
          response.data['data'].isNotEmpty) {
        // ‡πÅ‡∏õ‡∏•‡∏á available_qty ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢ ‡πÑ‡∏°‡πà‡∏ß‡πà‡∏≤‡∏à‡∏∞‡πÄ‡∏õ‡πá‡∏ô String ‡∏´‡∏£‡∏∑‡∏≠ number
        final dynamic rawQty = response.data['data'][0]['available_qty'];
        final double availableQty;

        if (rawQty is String) {
          availableQty = double.tryParse(rawQty) ?? 0.0;
        } else if (rawQty is num) {
          availableQty = rawQty.toDouble();
        } else {
          availableQty = 0.0;
        }

        logger.d('üì¶ Available quantity for $icCode: $availableQty');
        return availableQty;
      }

      return 0.0;
    } catch (e) {
      logger.e('‚õî Error checking available quantity', error: e);
      return 0.0; // ‡πÉ‡∏ô‡∏Å‡∏£‡∏ì‡∏µ error ‡πÉ‡∏´‡πâ return 0 ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢
    }
  }

  @override
  Future<Map<String, double>> getStockQuantities({
    required List<String> icCodes,
  }) async {
    try {
      if (icCodes.isEmpty) return {};

      // ‡∏™‡∏£‡πâ‡∏≤‡∏á WHERE clause ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö ic_code ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
      final icCodeList = icCodes.map((code) => "'$code'").join(',');

      final query =
          """
        SELECT 
          ic_code,
          COALESCE(
            (SELECT SUM(balance_qty) FROM ic_balance WHERE ic_code = ic_list.ic_code), 0
          ) - COALESCE(
            (SELECT SUM(quantity) 
             FROM cart_items ci 
             INNER JOIN carts c ON ci.cart_id = c.id 
             WHERE ci.ic_code = ic_list.ic_code AND c.status = 'active'), 0
          ) as available_qty
        FROM (
          SELECT UNNEST(ARRAY[$icCodeList]) as ic_code
        ) ic_list
      """;

      final response = await dio.post('/pgselect', data: {'query': query});

      final Map<String, double> stockMap = {};

      if (response.data['success'] == true && response.data['data'] != null) {
        final List<dynamic> results = response.data['data'];
        for (final result in results) {
          final icCode = result['ic_code']?.toString();

          // ‡πÅ‡∏õ‡∏•‡∏á available_qty ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢ ‡πÑ‡∏°‡πà‡∏ß‡πà‡∏≤‡∏à‡∏∞‡πÄ‡∏õ‡πá‡∏ô String ‡∏´‡∏£‡∏∑‡∏≠ number
          final dynamic rawQty = result['available_qty'];
          final double availableQty;

          if (rawQty is String) {
            availableQty = double.tryParse(rawQty) ?? 0.0;
          } else if (rawQty is num) {
            availableQty = rawQty.toDouble();
          } else {
            availableQty = 0.0;
          }

          if (icCode != null) {
            stockMap[icCode] = availableQty;
          }
        }
      }

      // ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏û‡∏ö ‡πÉ‡∏´‡πâ set ‡πÄ‡∏õ‡πá‡∏ô 0
      for (final icCode in icCodes) {
        if (!stockMap.containsKey(icCode)) {
          stockMap[icCode] = 0.0;
        }
      }

      logger.d('üì¶ Available stock quantities loaded: $stockMap');
      return stockMap;
    } catch (e) {
      logger.e('‚õî Error getting stock quantities', error: e);
      // ‡πÉ‡∏ô‡∏Å‡∏£‡∏ì‡∏µ error ‡πÉ‡∏´‡πâ return ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏õ‡πá‡∏ô 0 ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
      final Map<String, double> fallbackMap = {};
      for (final icCode in icCodes) {
        fallbackMap[icCode] = 0.0;
      }
      return fallbackMap;
    }
  }

  @override
  Future<List<CartItemModel>> getCartItems({required int customerId}) async {
    try {
      final query =
          """
        SELECT ci.id, ci.cart_id, ci.ic_code, ci.barcode, ci.unit_code, 
               ci.quantity, ci.unit_price, ci.total_price, ci.created_at, ci.updated_at
        FROM cart_items ci
        INNER JOIN carts c ON ci.cart_id = c.id
        WHERE c.customer_id = $customerId AND c.status = 'active'
        ORDER BY ci.created_at DESC
      """;

      final response = await dio.post('/pgselect', data: {'query': query});

      if (kDebugMode) {
        logger.d('üõí [DATA_SOURCE] Get cart items response: ${response.data}');
      }

      if (response.data['success'] == true && response.data['data'] != null) {
        return (response.data['data'] as List)
            .map((item) => CartItemModel.fromJson(item))
            .toList();
      }

      return [];
    } catch (e) {
      logger.e('‚õî Error getting cart items', error: e);
      if (kDebugMode) {
        debugPrint('üí• Error getting cart items: $e');
      }
      return [];
    }
  }

  @override
  Future<void> updateCartItemQuantity({
    required int customerId,
    required String icCode,
    required double quantity,
  }) async {
    try {
      if (quantity <= 0) {
        await removeFromCart(customerId: customerId, icCode: icCode);
        return;
      }

      // ‡∏•‡∏≠‡∏á‡∏ó‡∏≥ Refresh ‡∏¢‡∏≠‡∏î‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏à‡∏≤‡∏Å‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏•‡∏±‡∏Å‡∏Å‡πà‡∏≠‡∏ô (optional fallback)
      await refreshInventoryBalance(icCode: icCode).catchError((e) {
        // ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏ó‡∏≥‡∏≠‡∏∞‡πÑ‡∏£ - ‡πÉ‡∏ä‡πâ real-time calculation ‡πÅ‡∏ó‡∏ô
        logger.d(
          'üîÑ Using real-time calculation instead of refresh for $icCode',
        );
        return false;
      });

      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏¢‡∏≠‡∏î‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏™‡∏±‡πà‡∏á‡πÅ‡∏ö‡∏ö real-time(‡πÑ‡∏°‡πà‡∏£‡∏ß‡∏°‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ç‡∏≠‡∏á‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô)
      final availableQty = await getAvailableQuantityRealtime(
        icCode: icCode,
        currentCustomerId: customerId,
      );

      if (quantity > availableQty) {
        throw Exception(
          '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏±‡πà‡∏á‡πÑ‡∏î‡πâ‡πÄ‡∏Å‡∏¥‡∏ô‡∏¢‡∏≠‡∏î‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏™‡∏±‡πà‡∏á: ${availableQty.toStringAsFixed(0)} ‡∏´‡∏ô‡πà‡∏ß‡∏¢',
        );
      }

      final query =
          """
        UPDATE cart_items 
        SET quantity = $quantity, 
            total_price = $quantity * unit_price,
            updated_at = CURRENT_TIMESTAMP
        WHERE cart_id IN (
          SELECT id FROM carts WHERE customer_id = $customerId AND status = 'active'
        ) AND ic_code = '$icCode'
      """;

      final response = await dio.post('/pgcommand', data: {'command': query});

      if (kDebugMode) {
        logger.d('üõí [DATA_SOURCE] Update quantity response: ${response.data}');
      }

      // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏¢‡∏≠‡∏î‡∏£‡∏ß‡∏°‡πÉ‡∏ô‡∏ï‡∏£‡∏∞‡∏Å‡∏£‡πâ‡∏≤
      final cart = await getActiveCart(customerId: customerId);
      await _updateCartTotals(cart.id!);

      // Log ‡∏¢‡∏≠‡∏î‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏™‡∏±‡πà‡∏á‡πÉ‡∏´‡∏°‡πà‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÉ‡∏ô‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤
      final newAvailableQty = await getAvailableQuantityRealtime(
        icCode: icCode,
        currentCustomerId: customerId,
      );
      logger.d('üìä Updated available quantity for $icCode: $newAvailableQty');
    } catch (e) {
      logger.e('‚õî Error updating cart item quantity', error: e);
      if (kDebugMode) {
        debugPrint('üí• Error updating cart item quantity: $e');
      }
      throw Exception('Failed to update item quantity: $e');
    }
  }

  @override
  Future<void> removeFromCart({
    required int customerId,
    required String icCode,
  }) async {
    try {
      final query =
          """
        DELETE FROM cart_items 
        WHERE cart_id IN (
          SELECT id FROM carts WHERE customer_id = $customerId AND status = 'active'
        ) AND ic_code = '$icCode'
      """;

      final response = await dio.post('/pgcommand', data: {'command': query});

      if (kDebugMode) {
        logger.d(
          'üõí [DATA_SOURCE] Remove from cart response: ${response.data}',
        );
      }

      // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏¢‡∏≠‡∏î‡∏£‡∏ß‡∏°‡πÉ‡∏ô‡∏ï‡∏£‡∏∞‡∏Å‡∏£‡πâ‡∏≤
      final cart = await getActiveCart(customerId: customerId);
      await _updateCartTotals(cart.id!);

      // Log ‡∏¢‡∏≠‡∏î‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏™‡∏±‡πà‡∏á‡πÉ‡∏´‡∏°‡πà‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡∏•‡∏ö‡∏à‡∏≤‡∏Å‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤
      final newAvailableQty = await getAvailableQuantityRealtime(
        icCode: icCode,
        currentCustomerId: customerId,
      );
      logger.d(
        'üìä Updated available quantity for $icCode after removal: $newAvailableQty',
      );
    } catch (e) {
      logger.e('‚õî Error removing from cart', error: e);
      if (kDebugMode) {
        debugPrint('üí• Error removing from cart: $e');
      }
      throw Exception('Failed to remove item from cart: $e');
    }
  }

  @override
  Future<void> clearCart({required int customerId}) async {
    try {
      // ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏Å‡πà‡∏≠‡∏ô‡∏•‡∏ö‡πÄ‡∏û‡∏∑‡πà‡∏≠ refresh inventory
      final cartItems = await getCartItems(customerId: customerId);
      final icCodes = cartItems.map((item) => item.icCode).toList();

      final query =
          """
        DELETE FROM cart_items 
        WHERE cart_id IN (
          SELECT id FROM carts WHERE customer_id = $customerId AND status = 'active'
        )
      """;

      final response = await dio.post('/pgcommand', data: {'command': query});

      if (kDebugMode) {
        logger.d('üõí [DATA_SOURCE] Clear cart response: ${response.data}');
      }

      // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏¢‡∏≠‡∏î‡∏£‡∏ß‡∏°‡πÉ‡∏ô‡∏ï‡∏£‡∏∞‡∏Å‡∏£‡πâ‡∏≤
      final cart = await getActiveCart(customerId: customerId);
      await _updateCartTotals(
        cart.id!,
      ); // Refresh ‡∏¢‡∏≠‡∏î‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏Ç‡∏≠‡∏á‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏ó‡∏µ‡πà‡πÄ‡∏Ñ‡∏¢‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤
      if (icCodes.isNotEmpty) {
        try {
          await refreshMultipleInventoryBalances(icCodes: icCodes);
          logger.d(
            'üìä Refreshed inventory balances for ${icCodes.length} items after cart clear',
          );
        } catch (e) {
          logger.w(
            '‚ö†Ô∏è Could not refresh inventory balances after cart clear, continuing...',
          );
        }
      }
    } catch (e) {
      logger.e('‚õî Error clearing cart', error: e);
      if (kDebugMode) {
        debugPrint('üí• Error clearing cart: $e');
      }
      throw Exception('Failed to clear cart: $e');
    }
  }

  @override
  Future<OrderModel> createOrder({required int customerId}) async {
    try {
      final cart = await getActiveCart(customerId: customerId);
      final cartItems = await getCartItems(customerId: customerId);

      if (cartItems.isEmpty) {
        throw Exception('Cart is empty');
      } // Refresh ‡∏¢‡∏≠‡∏î‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏Ç‡∏≠‡∏á‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏Å‡πà‡∏≠‡∏ô‡∏™‡∏£‡πâ‡∏≤‡∏á order
      final icCodes = cartItems.map((item) => item.icCode).toList();
      try {
        await refreshMultipleInventoryBalances(icCodes: icCodes);
        logger.d('üîÑ Refreshed inventory balances before creating order');
      } catch (e) {
        logger.w(
          '‚ö†Ô∏è Could not refresh inventory balances before creating order, continuing...',
        );
      }

      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏¢‡∏≠‡∏î‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏™‡∏±‡πà‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏Å‡πà‡∏≠‡∏ô‡∏™‡∏£‡πâ‡∏≤‡∏á order
      for (var item in cartItems) {
        final availableQty = await getAvailableQuantityRealtime(
          icCode: item.icCode,
          currentCustomerId: customerId,
        );

        if (item.quantity > availableQty) {
          throw Exception(
            '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡πÑ‡∏î‡πâ ‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ ${item.icCode} ‡∏°‡∏µ‡∏¢‡∏≠‡∏î‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏™‡∏±‡πà‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡∏û‡∏≠ (‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£: ${item.quantity}, ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏™‡∏±‡πà‡∏á: $availableQty)',
          );
        }
      }

      // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå
      final orderNumber = 'ORD${DateTime.now().millisecondsSinceEpoch}';

      // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå
      final orderQuery =
          """
        INSERT INTO orders (cart_id, customer_id, order_number, total_amount, status, payment_status) 
        VALUES (${cart.id}, $customerId, '$orderNumber', ${cart.totalAmount}, 'pending', 'pending')
        RETURNING id, cart_id, customer_id, order_number, status, total_amount, shipping_address, 
                  payment_method, payment_status, notes, ordered_at
      """;

      final orderResponse = await dio.post(
        '/pgcommand',
        data: {'query': orderQuery},
      );

      if (orderResponse.data['success'] != true ||
          orderResponse.data['data'] == null ||
          orderResponse.data['data'].isEmpty) {
        throw Exception('Failed to create order');
      }

      final order = OrderModel.fromJson(orderResponse.data['data'][0]);

      // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÉ‡∏ô‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå
      for (var item in cartItems) {
        final itemQuery =
            """
          INSERT INTO order_items (order_id, ic_code, product_name, barcode, unit_code, quantity, unit_price, total_price)
          SELECT ${order.id}, '${item.icCode}', 
                 COALESCE(i.name, 'Unknown Product'), 
                 '${item.barcode ?? ''}', '${item.unitCode ?? ''}', 
                 ${item.quantity}, ${item.unitPrice}, ${item.totalPrice}
          FROM ic_inventory i 
          WHERE i.ic_code = '${item.icCode}'
        """;

        await dio.post('/pgcommand', data: {'command': itemQuery});
      }

      // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏ï‡∏£‡∏∞‡∏Å‡∏£‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô completed
      final updateCartQuery =
          """
        UPDATE carts 
        SET status = 'completed', updated_at = CURRENT_TIMESTAMP
        WHERE id = ${cart.id}
      """;

      await dio.post('/pgcommand', data: {'command': updateCartQuery});

      if (kDebugMode) {
        logger.d('üõí [DATA_SOURCE] Order created: ${order.orderNumber}');
      }

      return order;
    } catch (e) {
      logger.e('‚õî Error creating order', error: e);
      if (kDebugMode) {
        debugPrint('üí• Error creating order: $e');
      }
      throw Exception('Failed to create order: $e');
    }
  }

  /// ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏¢‡∏≠‡∏î‡∏£‡∏ß‡∏°‡πÅ‡∏•‡∏∞‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÉ‡∏ô‡∏ï‡∏£‡∏∞‡∏Å‡∏£‡πâ‡∏≤
  Future<void> _updateCartTotals(int cartId) async {
    try {
      final query =
          """
        UPDATE carts 
        SET total_amount = (
          SELECT COALESCE(SUM(total_price), 0) 
          FROM cart_items 
          WHERE cart_id = $cartId
        ),
        total_items = (
          SELECT COALESCE(SUM(quantity), 0) 
          FROM cart_items 
          WHERE cart_id = $cartId
        ),
        updated_at = CURRENT_TIMESTAMP
        WHERE id = $cartId
      """;

      await dio.post('/pgcommand', data: {'command': query});

      if (kDebugMode) {
        logger.d('üõí [DATA_SOURCE] Cart totals updated for cart: $cartId');
      }
    } catch (e) {
      logger.e('‚õî Error updating cart totals', error: e);
    }
  }

  @override
  Future<double> getAvailableQuantityRealtime({
    required String icCode,
    required int currentCustomerId,
  }) async {
    try {
      final query =
          """
        SELECT 
          COALESCE(
            (SELECT SUM(balance_qty) FROM ic_balance WHERE ic_code = '$icCode'), 0
          ) - COALESCE(
            (SELECT SUM(quantity) 
             FROM cart_items ci 
             INNER JOIN carts c ON ci.cart_id = c.id 
             WHERE ci.ic_code = '$icCode' AND c.status = 'active' AND c.customer_id != $currentCustomerId), 0
          ) as available_qty
      """;

      final response = await dio.post('/pgselect', data: {'query': query});

      if (kDebugMode) {
        logger.d(
          'üì¶ [DATA_SOURCE] Real-time available quantity response: ${response.data}',
        );
      }
      if (response.data['success'] == true &&
          response.data['data'] != null &&
          response.data['data'].isNotEmpty) {
        // ‡πÅ‡∏õ‡∏•‡∏á available_qty ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢ ‡πÑ‡∏°‡πà‡∏ß‡πà‡∏≤‡∏à‡∏∞‡πÄ‡∏õ‡πá‡∏ô String ‡∏´‡∏£‡∏∑‡∏≠ number
        final dynamic rawQty = response.data['data'][0]['available_qty'];
        final double availableQty;

        if (rawQty is String) {
          availableQty = double.tryParse(rawQty) ?? 0.0;
        } else if (rawQty is num) {
          availableQty = rawQty.toDouble();
        } else {
          availableQty = 0.0;
        }

        logger.d(
          'üì¶ Real-time available quantity for $icCode (excluding customer $currentCustomerId): $availableQty',
        );
        return availableQty;
      }

      return 0.0;
    } catch (e) {
      logger.e('‚õî Error getting real-time available quantity', error: e);
      return 0.0;
    }
  }

  @override
  Future<Map<String, double>> getAvailableQuantitiesForCart({
    required int customerId,
  }) async {
    try {
      final query =
          """
        SELECT 
          ci.ic_code,
          COALESCE(
            (SELECT SUM(balance_qty) FROM ic_balance WHERE ic_code = ci.ic_code), 0
          ) - COALESCE(
            (SELECT SUM(quantity) 
             FROM cart_items ci2 
             INNER JOIN carts c2 ON ci2.cart_id = c2.id 
             WHERE ci2.ic_code = ci.ic_code AND c2.status = 'active' AND c2.customer_id != $customerId), 0
          ) as available_qty
        FROM cart_items ci
        INNER JOIN carts c ON ci.cart_id = c.id
        WHERE c.customer_id = $customerId AND c.status = 'active'
        GROUP BY ci.ic_code
      """;

      final response = await dio.post('/pgselect', data: {'query': query});

      final Map<String, double> availableMap = {};

      if (response.data['success'] == true && response.data['data'] != null) {
        final List<dynamic> results = response.data['data'];
        for (final result in results) {
          final String? icCode = result['ic_code']?.toString();

          // ‡πÅ‡∏õ‡∏•‡∏á available_qty ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢ ‡πÑ‡∏°‡πà‡∏ß‡πà‡∏≤‡∏à‡∏∞‡πÄ‡∏õ‡πá‡∏ô String ‡∏´‡∏£‡∏∑‡∏≠ number
          final dynamic rawQty = result['available_qty'];
          final double availableQty;

          if (rawQty is String) {
            availableQty = double.tryParse(rawQty) ?? 0.0;
          } else if (rawQty is num) {
            availableQty = rawQty.toDouble();
          } else {
            availableQty = 0.0;
          }

          if (icCode != null) {
            availableMap[icCode] = availableQty;
          }
        }
      }

      if (kDebugMode) {
        logger.d(
          'üõí [DATA_SOURCE] Available quantities for cart: $availableMap',
        );
      }

      return availableMap;
    } catch (e) {
      logger.e('‚õî Error getting available quantities for cart', error: e);
      if (kDebugMode) {
        debugPrint('üí• Error getting available quantities for cart: $e');
      }
      return <String, double>{};
    }
  }

  /// Refresh ‡∏¢‡∏≠‡∏î‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏à‡∏≤‡∏Å‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏•‡∏±‡∏Å (ic_balance)
  /// ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡πÄ‡∏û‡∏∑‡πà‡∏≠ sync ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡∏à‡∏≤‡∏Å inventory system
  Future<bool> refreshInventoryBalance({required String icCode}) async {
    try {
      // Query ‡πÄ‡∏û‡∏∑‡πà‡∏≠ refresh ‡∏¢‡∏≠‡∏î‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö‡∏´‡∏•‡∏±‡∏Å
      final refreshQuery =
          """
        -- Refresh balance from main inventory system
        -- This would typically sync from ic_inventory to ic_balance
        UPDATE ic_balance 
        SET balance_qty = (
          SELECT COALESCE(on_hand_qty, 0) 
          FROM ic_inventory 
          WHERE ic_code = '$icCode'
        ),
        updated_at = CURRENT_TIMESTAMP
        WHERE ic_code = '$icCode';
        
        -- Insert if not exists
        INSERT INTO ic_balance (ic_code, balance_qty, updated_at)
        SELECT '$icCode', COALESCE(on_hand_qty, 0), CURRENT_TIMESTAMP
        FROM ic_inventory 
        WHERE ic_code = '$icCode'
        AND NOT EXISTS (SELECT 1 FROM ic_balance WHERE ic_code = '$icCode');
      """;

      final response = await dio.post(
        '/pgcommand',
        data: {'query': refreshQuery},
      );

      if (kDebugMode) {
        logger.d(
          'üîÑ [DATA_SOURCE] Refresh inventory balance for $icCode: ${response.data}',
        );
      }
      if (response.data['success'] == true) {
        logger.d('‚úÖ Inventory balance refreshed for $icCode');
        return true;
      } else {
        // Silent fallback - ‡πÑ‡∏°‡πà‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô
        logger.d('üîÑ Refresh failed for $icCode, using real-time calculation');
        return false;
      }
    } catch (e) {
      // Silent fallback - ‡πÑ‡∏°‡πà‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô ‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡πÄ‡∏õ‡πá‡∏ô scenario ‡∏ó‡∏µ‡πà‡∏Ñ‡∏≤‡∏î‡∏´‡∏ß‡∏±‡∏á‡πÑ‡∏î‡πâ
      logger.d('üîÑ Using real-time calculation for $icCode (fallback)');
      return false;
    }
  }

  /// Refresh ‡∏¢‡∏≠‡∏î‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏´‡∏•‡∏≤‡∏¢‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Å‡∏±‡∏ô
  Future<bool> refreshMultipleInventoryBalances({
    required List<String> icCodes,
  }) async {
    try {
      if (icCodes.isEmpty) return true;

      final icCodeList = icCodes.map((code) => "'$code'").join(',');

      final refreshQuery =
          """
        -- Refresh balance from main inventory system for multiple items
        UPDATE ic_balance 
        SET balance_qty = (
          SELECT COALESCE(on_hand_qty, 0) 
          FROM ic_inventory 
          WHERE ic_inventory.ic_code = ic_balance.ic_code
        ),
        updated_at = CURRENT_TIMESTAMP
        WHERE ic_code IN ($icCodeList);
        
        -- Insert missing items
        INSERT INTO ic_balance (ic_code, balance_qty, updated_at)
        SELECT ic_code, COALESCE(on_hand_qty, 0), CURRENT_TIMESTAMP
        FROM ic_inventory 
        WHERE ic_code IN ($icCodeList)
        AND NOT EXISTS (SELECT 1 FROM ic_balance WHERE ic_balance.ic_code = ic_inventory.ic_code);
      """;

      final response = await dio.post(
        '/pgcommand',
        data: {'query': refreshQuery},
      );

      if (kDebugMode) {
        logger.d(
          'üîÑ [DATA_SOURCE] Refresh multiple inventory balances: ${response.data}',
        );
      }

      if (response.data['success'] == true) {
        logger.d('‚úÖ Inventory balances refreshed for ${icCodes.length} items');
        return true;
      } else {
        logger.w('‚ö†Ô∏è Failed to refresh inventory balances');
        return false;
      }
    } catch (e) {
      logger.e('‚õî Error refreshing multiple inventory balances', error: e);
      return false;
    }
  }
}
